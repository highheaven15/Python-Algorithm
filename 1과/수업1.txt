백문기선생님
peterpmk@nate.com
010-6324-8977

자바, 이클립스 설치

IDE-Integrated Development Environment 통합개발환경
=>이 작업을 한번에 해주는게 IDE

Coding=programming 문서작성기 editor이용
Complie(작성) -> javac
Execution(실행) ->java
Debugging
Packaging-다른 컴퓨터에서 실행가능하도록 변환

이클립스
전용 폴더 만들기
폰트 수정
콘솔창 추가

편집기-editplus 설치

path 설정(추후에 할것)

//

JVM(JAVA Virtual Machine, 가바 가상 머신)을 통해 자바를 실행한다.

자바의 특징
1. 이식성이 높은 언어
2. 객체 지향 언어- 부품객체를 먼저 만들고 먼저 이것들을 조합해 전체 프로그램을 완성하는 기법
자바는 처음부터 OOP 개발용 언어로 캡슐화, 다형성, 상속 완벽 지원
3. 멀티 쓰레드 지원
4. 동적 로딩 지원
5. 오픈 소스=>ECO SYSTEM 형성에 도움
6. 막강한 오픈 소스 라이브러리 풍부

폴더의 bin-class파일이 들어있다.인코딩 - Hev viewer(16진수)로 byte code 내용을 볼수있다.

주석
// (행주석)
/* */(범위주석)

실행문의 끝에는 ;를 붙이기(c, c++도 동일, 파이썬에는 없다)

특수문자키 정리

~ : tilde(틸드), 비트 논리 연산자에서 NOT 등으로 사용
` : back quote(역 따옴표)
! : 느낌표. !=(두값이 다르냐?) NOT의 의미를 가진다.
@ : at
# : sharp, 숫자, #ffffff
$ : dollar, 표현식에서 사용된다.
% : percent, 나머지 연산자 10%3 = 1
^ : carat, 시작, exclusive OR연산자, ^C
& : ampersand, 주소연산자, &&(and), &(비트 연산자 and)
* : asterisk, 곱셈 연산기호 
() : 소괄호
{} : 중괄호
[] : 대괄호
_ : 밑줄, underscore, aaa_bbb
- : hyphen
+ : 
= : 대입연산자, assign, int a =10;
== : equal
| : bar, 비트 연산자 or
|| : 논리 연산자 or
\ : back slash, 역슬레시
: : colon, 콜론
; : semi colon, 세미콜론
< : 왼쪽꺾쇠괄호
> : 오른쪽꺾쇠괄호
? :
/ : slash

변수 : variable, 변하는수, 데이터를 저장할수 있는 기억공간

자료형-기본형

문자형(1글자)-char(2, 0~2^16-1)
숫자형-정수(소수점이 없음, 크기에 따라서): byte(1, -2^7,2^7-1), short(2, -2^15,2^15-1), int(4, -2^31,2^31-1), long(8, -2^63,2^63-1)
숫자형-실수(소수점이 있음, 크기에 따라서): float(4), double(8)
논리형-boolean(1)

1byte = 8 bit(binary digit, 정보기억의 최소단위)

bit =0, 1

리터럴과 접미사
리터럴 : 소스코드내에서 직접 입력된 변수의 초기값
접미사에는 L(long),f(float),d(double)이 있다.

자료형-참조형(데이터가 저장된 주소값이 저장된다)
배열, 클래스, 인터페이스

int score; 변수 선언
score =100; 변수 초기화(처음 값을 할당하는것)

int score =100;

변수명명규칙

1. 대소문자 구분되며, 길이에 제한이 없다.
2. 예약어를 사용해서는 안된다.
3. 숫자로 시작해서는 안된다.
4. 특수문자는 '_' , '$'만을 허용한다.

명명규칙-권장사항
1. 클래스 이름의 첫 글자는 항상 대문자로 한다, 변수와 매서드 이름의 첫 글자는 항상 소문자로 한다.
2. 여러 단어 이름은 단어의 첫글자를 대문자로 한다. ex)lastIndexOf, StringBuffer
3. 상수의 이름은 모두다 대문자로 한다. 단어는 '_'로 구분한다. ex)PI, MAX_NUMBER

10. = 10.0
.10 = 0.10
10f =10.0f
3.14e3f =3.14 * 10^3 = 3140.0f
1e1 = 1 *10^!

System.out.println(); =sysout +ctrl +space

defalut = 생략시값, 기본값
#지역변수는 사용되기 전에 반드시 초기화해줘야한다.

문자와 문자열

char ch = 'a'; #작은따옴표로 해야함
char ch = 'ab'; #에러난다.
String s1 = "ab"; #큰따옴표로 해야함

파이썬과의 차이점이다..

char ch = ''; #에러난다.
String s1 = ""; #에러 안남

String s1 = "a" + "b"; #"ab"가 된다.
문자열 + 정수 => "" + 7 = "7"이된다. #7이 문자열이 된다.

"" + 7 + 7 => "7" + 7 => "7"+"7" = > "77"
7 + 7 + "" = > 14 + "" => "14" + "" => "14"
문자열+anytype =>문자열
anytype +문자열 =>문자열



정수의 오버플로우(범위를 넘어가는경우)

byte b= 127;
byte b =128; //에러

b=b+1

형 변환(Casting)
값의 타입을 다른 타입으로 변환하는것이다.
boolean을 제외한 7개의 기본형은 서로 형변환이 가능하다.

형변환 예시
float f = 1.6f;
int i = (int)f;
i에는 1이 저장될것이다.(소수점 버림)

문자를 숫자로 대체 가능(ASCII 코드)
'A' 'B'누가 크냐 'B'의 ASCII 코드가 더 크다.

자동 형변환과 강제 형변환

1. byte -> int
byte크기의 바구니의 과일을 int크기의 바구니에 담는다
byte b =10;
int i = (int)b; //형변환 표시 없어도 자동 형변환

2. int -> byte
큰바구니의 과일을 작은 바구니에 담는다.
int i2 =300;
byte b2 = (byte) i2; //반드시 형변환 표시 있어야함, 값손실이 있을수가 있다.

계산기-프로그래머 모드
16진수
10진수
8진수
2진수

char는 int로만 형변환 가능

연산식에서 형변환
사이즈가 작은 타입+ 사이즈가 큰 타입 => 사이즈가 작은 타입이 자동으로 큰 타입으로 바뀐다.
10이 10.0으로 바뀐다.

변수의 사용범위- 변수를 사용하려면 변수를 선언하고, 사용
어디서 선언됬는다가 변수의 사용범위를 결정한다.
